package simu.entity;

import jakarta.persistence.*;

/**
 * JPA entity representing a single simulation run's line/station counts.
 * The entity is mapped to table {@code run}. The primary key {@link #id} is generated using
 * {@link GenerationType#IDENTITY} and will be {@code null} until the instance is persisted.
 * All other fields are non-null integer counters describing how many lines/servers a run uses
 * for each processing stage (check-in, luggage drop, security, passport control, and gate).
 * @author Elias Rinne
 */

@Entity
@Table(name = "run")
public class Run {

    /**
     * Surrogate primary key generated by the database (IDENTITY strategy).
     * Will be {@code null} until the entity has been persisted.
     */

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "check_in_queues_count", nullable = false)
    private int checkInQueuesCount;

    @Column(name = "luggage_drop_count", nullable = false)
    private int luggageDropCount;

    @Column(name = "priority_luggage_drop_count", nullable = false)
    private int priorityLuggageDropCount;

    @Column(name = "security_count", nullable = false)
    private int securityCount;

    @Column(name = "priority_security_count", nullable = false)
    private int prioritySecurityCount;

    @Column(name = "passport_control_count", nullable = false)
    private int passportControlCount;

    @Column(name = "priority_passport_control_count", nullable = false)
    private int priorityPassportControlCount;

    @Column(name = "gate_count", nullable = false)
    private int gateCount;

    /**
     * Constructs a new {@code Run} with explicit counts for each station/line category.
     *
     * @param luggageDropCount number of standard luggage-drop lines
     * @param priorityLuggageDropCount number of priority luggage-drop lines
     * @param securityCount number of standard security lines
     * @param checkInQueuesCount number of check-in queues/servers
     * @param prioritySecurityCount number of priority security lines
     * @param passportControlCount number of passport control lines
     * @param priorityPassportControlCount number of priority passport control lines
     * @param gateCount number of gates
     *
     * @author Elias Rinne
     */
    public Run(int luggageDropCount, int priorityLuggageDropCount, int securityCount, int checkInQueuesCount, int prioritySecurityCount, int passportControlCount, int priorityPassportControlCount, int gateCount) {
        this.luggageDropCount = luggageDropCount;
        this.priorityLuggageDropCount = priorityLuggageDropCount;
        this.securityCount = securityCount;
        this.checkInQueuesCount = checkInQueuesCount;
        this.prioritySecurityCount = prioritySecurityCount;
        this.passportControlCount = passportControlCount;
        this.priorityPassportControlCount = priorityPassportControlCount;
        this.gateCount = gateCount;
    }

    public Run() {}


    public Integer getId() {
        return id;
    }

    public int getCheckInQueuesCount() {
        return checkInQueuesCount;
    }

    public int getLuggageDropCount() {
        return luggageDropCount;
    }

    public int getPriorityLuggageDropCount() {
        return priorityLuggageDropCount;
    }

    public int getSecurityCount() {
        return securityCount;
    }

    public int getPrioritySecurityCount() {
        return prioritySecurityCount;
    }

    public int getPassportControlCount() {
        return passportControlCount;
    }

    public int getPriorityPassportControlCount() {
        return priorityPassportControlCount;
    }

    public int getGateCount() {
        return gateCount;
    }

}
